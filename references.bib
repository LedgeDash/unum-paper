@misc{sintel,
	key = {{MPI Sintel Flow Dataset}},
	title = {{MPI Sintel Flow Dataset}},
	note = "\url{https://paperswithcode.com/dataset/mpi-sintel}",
	urldate = {1-14-2021},
}

@misc{temporal,
    key = {{Temporal}},
    title = {{Temporal Platform}},
    note = "\url{https://docs.temporal.io/}",
	urldate = {7-31-2022},
}

@misc{aws-lambda,
    key = {{AWS Lambda}},
    title = {{AWS Lambda}},
    note = "\url{https://aws.amazon.com/lambda/}",
	urldate = {1-14-2021},
}

@misc{aws-step-functions,
	key = {{AWS Step Functions}},
	title = {{AWS Step Functions}},
	note = "\url{https://aws.amazon.com/step-functions/}",
	urldate = {1-14-2021},
}

@misc{aws-step-functions-pricing,
	key = {{AWS Step Functions Pricing}},
	title = {{AWS Step Functions Pricing}},
	note = "\url{https://aws.amazon.com/step-functions/pricing/}",
	urldate = {1-14-2021},
}


@misc{aws-step-functions-quotas,
	key = {{AWS Step Functions}},
	title = {{AWS Step Functions Quotas}},
	note = "\url{https://docs.aws.amazon.com/step-functions/latest/dg/limits-overview.html}",
	urldate = {1-14-2021},
}

@misc{cloudfront-rate-limiting,
	key = {{AWS Cloudfront rate limiting}},
	title = {{AWS CloudFront WAF Rate-based rule statement}},
	note = "\url{https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-rate-based.html}",
	urldate = {1-14-2021},
}



@misc{google-cloud-composer,
	key = {{Google Cloud Composer (GCC)}},
	title = {{Google Cloud Composer (GCC)}},
	note = "\url{https://cloud.google.com/composer}",
	urldate = {1-14-2021},
}

@misc{google-workflows,
	key = {{Google Workflows}},
	title = {{Google Workflows}},
	note = "\url{https://cloud.google.com/workflows}",
	urldate = {1-14-2021},
}

@misc{faas-vs-ruby-on-rails,
	key = {{Moving my serverless project to Ruby on Rails}},
	title = {{Moving my serverless project to Ruby on Rails}},
	note = "\url{https://frantic.im/back-to-rails}",
	urldate = {11-14-2020},
}

@misc{aws-lambda-with-s3,
	key = {{Using AWS Lambda with Amazon S3}},
	title = {{Using AWS Lambda with Amazon S3}},
	note = "\url{https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html}",
	urldate = {1-14-2021},
}

@misc{aws-lambda-pricing,
	key = {{AWS Lambda Pricing}},
	title = {{AWS Lambda Pricing}},
	note = "\url{https://aws.amazon.com/lambda/pricing/}",
	urldate = {1-14-2021},
}

@misc{dynamodb-pricing,
	key = {{DynamoDB Pricing for On-Demand Capacity}},
	title = {{DynamoDB Pricing for On-Demand Capacity}},
	note = "\url{https://aws.amazon.com/dynamodb/pricing/on-demand/}",
	urldate = {1-14-2021},
}

@misc{firestore-pricing,
	key = {{Google Cloud Firestore Pricing}},
	title = {{Google Cloud Firestore Pricing}},
	note = "\url{https://cloud.google.com/firestore/pricing}",
	urldate = {1-14-2021},
}

@misc{aws-lambda-invoke-type,
	key = {{Invoke, AWS Lambda}},
	title = {{Invoke, AWS Lambda}},
	note = "\url{https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestParameters}",
	urldate = {1-14-2021},
}

@misc{lambda-billing,
	key = {{AWS Lambda Pricing}},
	title = {{AWS Lambda Pricing}},
	note = "\url{https://aws.amazon.com/lambda/pricing/}",
	urldate = {1-14-2021},
}

@misc{gcf-billing,
	key = {{Google Cloud Functions Pricing}},
	title = {{Google Cloud Functions Pricing}},
	note = "\url{https://cloud.google.com/functions/pricing}",
	urldate = {1-14-2021},
}

@misc{cloudguru-async-lambda,
	key = {{Save time and money with AWS Lambda using asynchronous programming}},
	title = {{Save time and money with AWS Lambda using asynchronous programming}},
	note = "\url{https://acloudguru.com/blog/engineering/save-time-and-money-with-aws-lambda-using-asynchronous-programming}",
	urldate = {1-14-2021},
}

@misc{jeremy-daly-lambda-sync-http,
	key = {{Serverless Tip: Don’t overpay when waiting on remote API calls}},
	title = {{Serverless Tip: Don’t overpay when waiting on remote API calls}},
	note = "\url{https://www.jeremydaly.com/serverless-tip-dont-overpay-when-waiting-on-remote-api-calls/}",
	urldate = {1-14-2021},
}

@misc{sensedeep-async-lambda,
	key = {{Invoke HTTP from AWS Lambda without Waiting}},
	title = {{Invoke HTTP from AWS Lambda without Waiting}},
	note = "\url{https://www.sensedeep.com/blog/posts/stories/lambda-fast-http.html}",
	urldate = {1-14-2021},
}

@misc{aws-step-functions-map-state,
	key = {{Map State, AWS Step Functions Developer Guide}},
	title = {{Map State, AWS Step Functions Developer Guide}},
	note = "\url{https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-map-state.html}",
	urldate = {1-14-2021},
}

@misc{aws-step-functions-dynamic-parallelism,
	key = {{AWS Step Functions adds support for dynamic parallelism in workflows}},
	title = {{AWS Step Functions adds support for dynamic parallelism in workflows}},
	note = "\url{https://aws.amazon.com/about-aws/whats-new/2019/09/aws-step-functions-adds-support-for-dynamic-parallelism-in-workflows/}",
	urldate = {1-14-2021},
}

@misc{aws-step-functions-parallel-state,
	key = {{Parallel State, AWS Step Functions Developer Guide}},
	title = {{Parallel State, AWS Step Functions Developer Guide}},
	note = "\url{https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-parallel-state.html}",
	urldate = {1-14-2021},
}

@misc{aws-step-functions-exec-gntee,
	key = {{Execution guarantees, Standard vs. Express Workflows, AWS Step Functions Developer Guide}},
	title = {{Execution guarantees, Standard vs. Express Workflows, AWS Step Functions Developer Guide}},
	note = "\url{https://docs.aws.amazon.com/step-functions/latest/dg/express-at-least-once-execution.html}",
	urldate = {1-14-2021},
}

@misc{aws-step-functions-standard-vs-express,
	key = {{Standard vs. Express Workflows, AWS Step Functions Developer Guide}},
	title = {{Standard vs. Express Workflows, AWS Step Functions Developer Guide}},
	note = "\url{https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html}",
	urldate = {1-14-2021},
}

@misc{aws-step-functions-retry,
	key = {{Error handling in Step Functions, AWS Step Functions Developer Guide}},
	title = {{Error handling in Step Functions, AWS Step Functions Developer Guide}},
	note = "\url{https://docs.aws.amazon.com/step-functions/latest/dg/concepts-error-handling.html}",
	urldate = {1-14-2021},
}


@misc{aws-s3-event-announce,
	key = {{New Event Notifications for Amazon S3, AWS News Blog}},
	title = {{New Event Notifications for Amazon S3, AWS News Blog}},
	note = "\url{https://aws.amazon.com/blogs/aws/s3-event-notification/}",
	urldate = {1-14-2021},
}

@misc{aws-lambda-retry,
	key = {{Error handling and automatic retries in AWS Lambda}},
	title = {{Error handling and automatic retries in AWS Lambda}},
	note = "\url{https://docs.aws.amazon.com/lambda/latest/dg/invocation-retries.html}",
	urldate = {1-14-2021},
}

@misc{aws-lambda-failure-destination,
	key = {{Lambda Failure Destination}},
	title = {{Introducing AWS Lambda Destinations}},
	note = "\url{https://aws.amazon.com/blogs/compute/introducing-aws-lambda-destinations/}",
	urldate = {1-14-2021},
}


Introducing AWS Lambda Destinations

@misc{iot-pipeline,
	key = {{lambda-refarch-iotbackend, aws-samples}},
	title = {{lambda-refarch-iotbackend, aws-samples}},
	note = "\url{https://github.com/aws-samples/lambda-refarch-iotbackend}",
	urldate = {1-14-2021},
}



@misc{excamera-binary,
	key = {{ExCamera static binaries}},
	title = {{ExCamera static binaries}},
	note = "\url{https://github.com/excamera/excamera-static-bins}",
	urldate = {1-14-2021},
}

@misc{durable-functions,
	key = {{Azure Durable Functions}},
	title = {{Azure Durable Functions}},
	note = "\url{https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview?tabs=csharp}",
	urldate = {1-14-2021},
}

@misc{datadog-state-of-serverless,
	key = {{The State of Serverless}},
	title = {{The State of Serverless}},
	note = "\url{https://www.datadoghq.com/state-of-serverless/}",
	urldate = {1-14-2021},
}

@misc{aws-lambda-async-invoke,
	key = {{Asynchronous invocation, AWS Lambda Developer Guide}},
	title = {{Asynchronous invocation, AWS Lambda Developer Guide}},
	note = "\url{https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html}",
	urldate = {11-14-2021},
}



@misc{google-cloud-functions-async-invoke,
	key = {{Asynchronous patterns for Cloud Functions}},
	title = {{Asynchronous patterns for Cloud Functions}},
	note = "\url{https://cloud.google.com/community/tutorials/cloud-functions-async}",
	urldate = {11-14-2021},
}

@misc{openfaas,
	key = {{OpenFaaS Developers Guide}},
	title = {{OpenFaaS Developers Guide}},
	note = "\url{https://docs.openfaas.com/reference/}",
	urldate = {11-14-2021},
}

@misc{openfaas-async-invoke,
	key = {{Asynchronous Functions, OpenFaaS Developers Guide}},
	title = {{Asynchronous Functions, OpenFaaS Developers Guide}},
	note = "\url{https://docs.openfaas.com/reference/async/}",
	urldate = {11-14-2021},
}

@misc{openfaas-retry,
	key = {{OpenFaaS Retry}},
	title = {{OpenFaaS Retries for functions}},
	note = "\url{https://docs.openfaas.com/openfaas-pro/retries/}",
	urldate = {11-14-2021},
}


@misc{openwhisk,
	key = {{OpenWhisk Actions, OpenWhisk Programming Model}},
	title = {{OpenWhisk Actions, OpenWhisk Programming Model}},
	note = "\url{https://github.com/apache/openwhisk/blob/master/docs/actions.md}",
	urldate = {11-14-2021},
}

@misc{openwhisk-async-invoke,
	key = {{OpenWhisk Actions, OpenWhisk Programming Model}},
	title = {{OpenWhisk Actions, OpenWhisk Programming Model}},
	note = "\url{https://github.com/apache/openwhisk/blob/master/docs/actions.md}",
	urldate = {11-14-2021},
}

@misc{openwhisk-action-error-handling,
	key = {{OpenWhisk Actions, Error Handling}},
	title = {{OpenWhisk Actions, Error Handling}},
	note = "\url{https://github.com/ibm-cloud-docs/openwhisk/blob/master/error-handling.md}",
	urldate = {11-14-2021},
}



@misc{gcp-functions,
	key = {{Google Cloud Functions}},
	title = {{Google Cloud Functions}},
	note = "\url{https://cloud.google.com/functions}",
	urldate = {11-14-2021},
}

@misc{google-cloud-functions-exec-guarantee,
	key = {{Execution Guarantee, Cloud Functions Execution Environment, Google Cloud Functions}},
	title = {{Execution Guarantee, Cloud Functions Execution Environment, Google Cloud Functions}},
	note = "\url{https://cloud.google.com/functions/docs/concepts/exec#execution_guarantees}",
	urldate = {11-14-2021},
}

@misc{google-cloud-functions-retry,
	key = {{Retrying Event-Driven Functions, Google Cloud Functions}},
	title = {{Retrying Event-Driven Functions, Google Cloud Functions}},
	note = "\url{https://cloud.google.com/functions/docs/bestpractices/retries}",
	urldate = {11-14-2021},
}


@misc{azure-functions,
	key = {{Azure Functions Developers Guide}},
	title = {{Azure Functions Developers Guide}},
	note = "\url{https://docs.microsoft.com/en-us/azure/azure-functions}",
	urldate = {11-14-2021},
}

@misc{azure-functions-async-invoke,
	key = {{Azure Functions HTTP trigger, Azure Functions Developers Guide}},
	title = {{Azure Functions HTTP trigger, Azure Functions Developers Guide}},
	note = "\url{https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp}",
	urldate = {11-14-2021},
}

@misc{azure-functions-exec-guarantee,
	key = {{Azure Functions reliable event processing, Azure Functions Developers Guide}},
	title = {{Azure Functions reliable event processing, Azure Functions Developers Guide}},
	note = "\url{https://docs.microsoft.com/en-us/azure/azure-functions/functions-reliable-event-processing#how-azure-functions-consumes-event-hubs-events}",
	urldate = {11-14-2021},
}


@misc{azure-functions-retry,
	key = {{Azure Functions error handling and retries, Azure Functions Developers Guide}},
	title = {{Azure Functions error handling and retries, Azure Functions Developers Guide}},
	note = "\url{https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-error-pages?tabs=csharp}",
	urldate = {11-14-2021},
}



@misc{cosmosdb-pricing,
	key = {{Azure Cosmos DB pricing}},
	title = {{Azure Cosmos DB pricing}},
	note = "\url{https://azure.microsoft.com/en-us/pricing/details/cosmos-db/}",
	urldate = {11-14-2021},
}

@misc{fn-flow,
	key = {{Fn Flow}},
	title = {{Fn Flow}},
	note = "\url{https://fnproject.io/}",
	urldate = {11-14-2021},
}




@inproceedings{mapreduce,
title	= {MapReduce: Simplified Data Processing on Large Clusters},
author	= {Jeffrey Dean and Sanjay Ghemawat},
year	= {2004},
booktitle	= {OSDI'04: Sixth Symposium on Operating System Design and Implementation},
pages	= {137--150},
address	= {San Francisco, CA}
}



@inproceedings{deathstar,
author = {Gan, Yu and Zhang, Yanqi and Cheng, Dailun and Shetty, Ankitha and Rathi, Priyal and Katarki, Nayan and Bruno, Ariana and Hu, Justin and Ritchken, Brian and Jackson, Brendon and Hu, Kelvin and Pancholi, Meghna and He, Yuan and Clancy, Brett and Colen, Chris and Wen, Fukang and Leung, Catherine and Wang, Siyuan and Zaruvinsky, Leon and Espinosa, Mateo and Lin, Rick and Liu, Zhongling and Padilla, Jake and Delimitrou, Christina},
title = {An Open-Source Benchmark Suite for Microservices and Their Hardware-Software Implications for Cloud and Edge Systems},
year = {2019},
isbn = {9781450362405},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297858.3304013},
doi = {10.1145/3297858.3304013},
booktitle = {Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {3–18},
numpages = {16},
keywords = {qos, cloud computing, fpga, serverless, cluster management, microservices, acceleration, datacenters},
location = {Providence, RI, USA},
series = {ASPLOS '19}
}


@inproceedings {gg-atc,
author = {Sadjad Fouladi and Francisco Romero and Dan Iter and Qian Li and Shuvo Chatterjee and Christos Kozyrakis and Matei Zaharia and Keith Winstein},
title = {From Laptop to Lambda: Outsourcing Everyday Jobs to Thousands of Transient Functional Containers},
booktitle = {2019 {USENIX} Annual Technical Conference ({USENIX} {ATC} 19)},
year = {2019},
isbn = {978-1-939133-03-8},
address = {Renton, WA},
pages = {475--488},
url = {https://www.usenix.org/conference/atc19/presentation/fouladi},
publisher = {{USENIX} Association},
month = jul,
}

@inproceedings {excamera,
author = {Sadjad Fouladi and Riad S. Wahby and Brennan Shacklett and Karthikeyan Vasuki Balasubramaniam and William Zeng and Rahul Bhalerao and Anirudh Sivaraman and George Porter and Keith Winstein},
title = {Encoding, Fast and Slow: Low-Latency Video Processing Using Thousands of Tiny Threads},
booktitle = {14th {USENIX} Symposium on Networked Systems Design and Implementation ({NSDI} 17)},
year = {2017},
isbn = {978-1-931971-37-9},
address = {Boston, MA},
pages = {363--376},
url = {https://www.usenix.org/conference/nsdi17/technical-sessions/presentation/fouladi},
publisher = {{USENIX} Association},
month = mar,
}

@article{cloudburst,
author = {Sreekanti, Vikram and Wu, Chenggang and Lin, Xiayue Charles and Schleier-Smith, Johann and Gonzalez, Joseph E. and Hellerstein, Joseph M. and Tumanov, Alexey},
title = {Cloudburst: Stateful Functions-as-a-Service},
year = {2020},
issue_date = {August 2020},
publisher = {VLDB Endowment},
volume = {13},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/3407790.3407836},
doi = {10.14778/3407790.3407836},
journal = {Proc. VLDB Endow.},
month = jul,
pages = {2438–2452},
numpages = {15}
}

@inproceedings{triggerflow,
author = {L\'{o}pez, Pedro Garc\'{\i}a and Arjona, Aitor and Samp\'{e}, Josep and Slominski, Aleksander and Villard, Lionel},
title = {Triggerflow: Trigger-Based Orchestration of Serverless Workflows},
year = {2020},
isbn = {9781450380287},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3401025.3401731},
doi = {10.1145/3401025.3401731},
abstract = {As more applications are being moved to the Cloud thanks to serverless computing,
it is increasingly necessary to support native life cycle execution of those applications
in the data center.But existing systems either focus on short-running workflows (like
IBM Composer or Amazon Express Workflows) or impose considerable overheads for synchronizing
massively parallel jobs (Azure Durable Functions, Amazon Step Functions, Google Cloud
Composer). None of them are open systems enabling extensible interception and optimization
of custom workflows.We present Triggerflow: an extensible Trigger-based Orchestration
architecture for serverless workflows built on top of Knative Eventing and Kubernetes
technologies. We demonstrate that Triggerflow is a novel serverless building block
capable of constructing different reactive schedulers (State Machines, Directed Acyclic
Graphs, Workflow as code). We also validate that it can support high-volume event
processing workloads, auto-scale on demand and transparently optimize scientific workflows.},
booktitle = {Proceedings of the 14th ACM International Conference on Distributed and Event-Based Systems},
pages = {3–14},
numpages = {12},
keywords = {serverless, orchestration, event-based},
location = {Montreal, Quebec, Canada},
series = {DEBS '20}
}

@inproceedings{pywren,
author = {Jonas, Eric and Pu, Qifan and Venkataraman, Shivaram and Stoica, Ion and Recht, Benjamin},
title = {Occupy the Cloud: Distributed Computing for the 99%},
year = {2017},
isbn = {9781450350280},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3127479.3128601},
doi = {10.1145/3127479.3128601},
abstract = {Distributed computing remains inaccessible to a large number of users, in spite of
many open source platforms and extensive commercial offerings. While distributed computation
frameworks have moved beyond a simple map-reduce model, many users are still left
to struggle with complex cluster management and configuration tools, even for running
simple embarrassingly parallel jobs. We argue that stateless functions represent a
viable platform for these users, eliminating cluster management overhead, fulfilling
the promise of elasticity. Furthermore, using our prototype implementation, PyWren,
we show that this model is general enough to implement a number of distributed computing
models, such as BSP, efficiently. Extrapolating from recent trends in network bandwidth
and the advent of disaggregated storage, we suggest that stateless functions are a
natural fit for data processing in future computing environments.},
booktitle = {Proceedings of the 2017 Symposium on Cloud Computing},
pages = {445–451},
numpages = {7},
keywords = {distributed computing, AWS lambda, PyWren, serverless},
location = {Santa Clara, California},
series = {SoCC '17}
}

@inproceedings{kappa,
author = {Zhang, Wen and Fang, Vivian and Panda, Aurojit and Shenker, Scott},
title = {Kappa: A Programming Framework for Serverless Computing},
year = {2020},
isbn = {9781450381376},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3419111.3421277},
doi = {10.1145/3419111.3421277},
abstract = {Serverless computing has recently emerged as a new paradigm for running software on
the cloud. In this paradigm, programs need to be expressed as a set of short-lived
tasks, each of which can complete within a short bounded time (e.g., 15 minutes on
AWS Lambda). Serverless computing is beneficial to cloud providers---by allowing them
to better utilize resources---and to users---by simplifying management and enabling
greater elasticity. However, developing applications to run in this environment is
challenging, requiring users to appropriately partition their code, develop new coordination
mechanisms, and deal with failure recovery. In this paper, we propose Kappa, a framework
that simplifies serverless development. It uses checkpointing to handle lambda function
timeouts, and provides concurrency mechanisms that enable parallel computation and
coordination.},
booktitle = {Proceedings of the 11th ACM Symposium on Cloud Computing},
pages = {328–343},
numpages = {16},
keywords = {distributed computing, serverless},
location = {Virtual Event, USA},
series = {SoCC '20}
}


@inproceedings{shahrad-azure,
  title={Serverless in the wild: Characterizing and optimizing the serverless workload at a large cloud provider},
  author={Shahrad, Mohammad and Fonseca, Rodrigo and Goiri, {\'I}{\~n}igo and Chaudhry, Gohar and Batum, Paul and Cooke, Jason and Laureano, Eduardo and Tresness, Colby and Russinovich, Mark and Bianchini, Ricardo},
  booktitle={2020 $\{$USENIX$\}$ Annual Technical Conference ($\{$USENIX$\}$$\{$ATC$\}$ 20)},
  pages={205--218},
  year={2020}
}

@inproceedings{icpe-2020,
author = {Eismann, Simon and Grohmann, Johannes and van Eyk, Erwin and Herbst, Nikolas and Kounev, Samuel},
title = {Predicting the Costs of Serverless Workflows},
year = {2020},
isbn = {9781450369916},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3358960.3379133},
doi = {10.1145/3358960.3379133},
booktitle = {Proceedings of the ACM/SPEC International Conference on Performance Engineering},
pages = {265–276},
numpages = {12},
keywords = {performance, cost, workflows, serverless, prediction},
location = {Edmonton AB, Canada},
series = {ICPE '20}
}

@INPROCEEDINGS{ieee-fakhfakh,  author={Fakhfakh, Fairouz and Kacem, Hatem Hadj and Kacem, Ahmed Hadj},  booktitle={2014 IEEE 18th International Enterprise Distributed Object Computing Conference Workshops and Demonstrations},   title={Workflow Scheduling in Cloud Computing: A Survey},   year={2014},  volume={},  number={},  pages={372-378},  doi={10.1109/EDOCW.2014.61}}

@techreport{berkeley,
    Author = {Jonas, Eric and Schleier-Smith, Johann and Sreekanti, Vikram and Tsai, Chia-Che and Khandelwal, Anurag and Pu, Qifan and Shankar, Vaishaal and Menezes Carreira, Joao and Krauth, Karl and Yadwadkar, Neeraja and Gonzalez, Joseph and Popa, Raluca Ada and Stoica, Ion and Patterson, David A.},
    Title = {Cloud Programming Simplified: A Berkeley View on Serverless Computing},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2019},
    Month = {Feb},
    URL = {http://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.html},
    Number = {UCB/EECS-2019-3},
    Abstract = {Serverless cloud computing handles virtually all the system administration operations needed to make it easier for programmers to use the cloud. It provides an interface that greatly simplifies cloud programming, and represents an evolution that parallels the transition from assembly language to high-level programming languages. This paper gives a quick history of cloud computing, including an accounting of the predictions of the 2009 Berkeley View of Cloud Computing paper, explains the motivation for serverless computing, describes applications that stretch the current limits of serverless, and then lists obstacles and research opportunities required for serverless computing to fulfill its full potential. Just as the 2009 paper identified challenges for the cloud and predicted they would be addressed and that cloud use would accelerate, we predict these issues are solvable and that serverless computing will grow to dominate the future of cloud computing.}
}


@inproceedings{boki,
author = {Jia, Zhipeng and Witchel, Emmett},
title = {Boki: Stateful Serverless Computing with Shared Logs},
year = {2021},
isbn = {9781450387095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3477132.3483541},
doi = {10.1145/3477132.3483541},
abstract = {Boki is a new serverless runtime that exports a shared log API to serverless functions. Boki shared logs enable stateful serverless applications to manage their state with durability, consistency, and fault tolerance. Boki shared logs achieve high throughput and low latency. The key enabler is the metalog, a novel mechanism that allows Boki to address ordering, consistency and fault tolerance independently. The metalog orders shared log records with high throughput and it provides read consistency while allowing service providers to optimize the write and read path of the shared log in different ways. To demonstrate the value of shared logs for stateful serverless applications, we build Boki support libraries that implement fault-tolerant workflows, durable object storage, and message queues. Our evaluation shows that shared logs can speed up important serverless workloads by up to 4.7x.},
booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
pages = {691–707},
numpages = {17},
keywords = {shared log, consistency, Serverless computing, function-as-a-service},
location = {Virtual Event, Germany},
series = {SOSP '21}
}


@inproceedings {beldi,
author = {Haoran Zhang and Adney Cardoza and Peter Baile Chen and Sebastian Angel and Vincent Liu},
title = {Fault-tolerant and transactional stateful serverless workflows},
booktitle = {14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)},
year = {2020},
isbn = {978-1-939133-19-9},
pages = {1187--1204},
url = {https://www.usenix.org/conference/osdi20/presentation/zhang-haoran},
publisher = {USENIX Association},
month = nov,
}

@inproceedings{hello-retail,
author = {Sankaran, Arnav and Datta, Pubali and Bates, Adam},
title = {Workflow Integration Alleviates Identity and Access Management in Serverless Computing},
year = {2020},
isbn = {9781450388580},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3427228.3427665},
doi = {10.1145/3427228.3427665},
booktitle = {Annual Computer Security Applications Conference},
pages = {496–509},
numpages = {14},
keywords = {Serverless Computing, Information Flow Control, Access Control},
location = {Austin, USA},
series = {ACSAC '20}
}

@article{netherite,
author = {Burckhardt, Sebastian and Chandramouli, Badrish and Gillum, Chris and Justo, David and Kallas, Konstantinos and McMahon, Connor and Meiklejohn, Christopher S. and Zhu, Xiangfeng},
title = {Netherite: Efficient Execution of Serverless Workflows},
year = {2022},
issue_date = {April 2022},
publisher = {VLDB Endowment},
volume = {15},
number = {8},
issn = {2150-8097},
url = {https://doi.org/10.14778/3529337.3529344},
doi = {10.14778/3529337.3529344},
abstract = {Serverless is a popular choice for cloud service architects because it can provide scalability and load-based billing with minimal developer effort. Functions-as-a-service (FaaS) are originally stateless, but emerging frameworks add stateful abstractions. For instance, the widely used Durable Functions (DF) allow developers to write advanced serverless applications, including reliable workflows and actors, in a programming language of choice. DF implicitly and continuosly persists the state and progress of applications, which greatly simplifies development, but can create an IOps bottleneck.To improve efficiency, we introduce Netherite, a novel architecture for executing serverless workflows on an elastic cluster. Netherite groups the numerous application objects into a smaller number of partitions, and pipelines the state persistence of each partition. This improves latency and throughput, as it enables workflow steps to group commit, even if causally dependent. Moreover, Netherite leverages FASTER's hybrid log approach to support larger-than-memory application state, and to enable efficient partition movement between compute hosts.Our evaluation shows that (a) Netherite achieves lower latency and higher throughput than the original DF engine, by more than an order of magnitude in some cases, and (b) that Netherite has lower latency than some commonly used alternatives, like AWS Step Functions or cloud storage triggers.},
journal = {Proc. VLDB Endow.},
month = {apr},
pages = {1591–1604},
numpages = {14}
}


@inproceedings{double-billing,
author = {Baldini, Ioana and Cheng, Perry and Fink, Stephen J. and Mitchell, Nick and Muthusamy, Vinod and Rabbah, Rodric and Suter, Philippe and Tardieu, Olivier},
title = {The Serverless Trilemma: Function Composition for Serverless Computing},
year = {2017},
isbn = {9781450355308},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133850.3133855},
doi = {10.1145/3133850.3133855},
abstract = {The field of serverless computing has recently emerged in support of highly scalable, event-driven applications. A serverless application is a set of stateless functions, along with the events that should trigger their activation. A serverless runtime allocates resources as events arrive, avoiding the need for costly pre-allocated or dedicated hardware. While an attractive economic proposition, serverless computing currently lags behind the state of the art when it comes to function composition. This paper addresses the challenge of programming a composition of functions, where the composition is itself a serverless function. We demonstrate that engineering function composition into a serverless application is possible, but requires a careful evaluation of trade-offs. To help in evaluating these trade-offs, we identify three competing constraints: functions should be considered as black boxes; function composition should obey a substitution principle with respect to synchronous invocation; and invocations should not be double-billed. Furthermore, we argue that, if the serverless runtime is limited to a reactive core, i.e. one that deals only with dispatching functions in response to events, then these constraints form the serverless trilemma. Without specific runtime support, compositions-as-functions must violate at least one of the three constraints. Finally, we demonstrate an extension to the reactive core of an open-source serverless runtime that enables the sequential composition of functions in a trilemma-satisfying way. We conjecture that this technique could be generalized to support other combinations of functions.},
booktitle = {Proceedings of the 2017 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {89–103},
numpages = {15},
keywords = {cloud, serverless, functional, composition},
location = {Vancouver, BC, Canada},
series = {Onward! 2017}
}

@article{formal-foundation-exec-gtnee,
author = {Jangda, Abhinav and Pinckney, Donald and Brun, Yuriy and Guha, Arjun},
title = {Formal Foundations of Serverless Computing},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {OOPSLA},
url = {https://doi.org/10.1145/3360575},
doi = {10.1145/3360575},
abstract = {Serverless computing (also known as functions as a service) is a new cloud computing abstraction that makes it easier to write robust, large-scale web services. In serverless computing, programmers write what are called serverless functions, which are programs that respond to external events. When demand for the serverless function spikes, the platform automatically allocates additional hardware and manages load-balancing; when demand falls, the platform silently deallocates idle resources; and when the platform detects a failure, it transparently retries affected requests. In 2014, Amazon Web Services introduced the first serverless platform, AWS Lambda, and similar abstractions are now available on all major cloud computing platforms. Unfortunately, the serverless computing abstraction exposes several low-level operational details that make it hard for programmers to write and reason about their code. This paper sheds light on this problem by presenting λλ, an operational semantics of the essence of serverless computing. Despite being a small (half a page) core calculus, λλ models all the low-level details that serverless functions can observe. To show that λλ is useful, we present three applications. First, to ease reasoning about code, we present a simplified naive semantics of serverless execution and precisely characterize when the naive semantics and λλ coincide. Second, we augment λλ with a key-value store to allow reasoning about stateful serverless functions. Third, since a handful of serverless platforms support serverless function composition, we show how to extend λλ with a composition language and show that our implementation can outperform prior work.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {149},
numpages = {26},
keywords = {serverless computing, distributed computing, formal language semantics}
}

@article{durable-semantics,
author = {Burckhardt, Sebastian and Gillum, Chris and Justo, David and Kallas, Konstantinos and McMahon, Connor and Meiklejohn, Christopher S.},
title = {Durable Functions: Semantics for Stateful Serverless},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {OOPSLA},
url = {https://doi.org/10.1145/3485510},
doi = {10.1145/3485510},
abstract = {Serverless, or Functions-as-a-Service (FaaS), is an increasingly popular paradigm for application development, as it provides implicit elastic scaling and load based billing. However, the weak execution guarantees and intrinsic compute-storage separation of FaaS create serious challenges when developing applications that require persistent state, reliable progress, or synchronization. This has motivated a new generation of serverless frameworks that provide stateful abstractions. For instance, Azure's Durable Functions (DF) programming model enhances FaaS with actors, workflows, and critical sections. As a programming model, DF is interesting because it combines task and actor parallelism, which makes it suitable for a wide range of serverless applications. We describe DF both informally, using examples, and formally, using an idealized high-level model based on the untyped lambda calculus. Next, we demystify how the DF runtime can (1) execute in a distributed unreliable serverless environment with compute-storage separation, yet still conform to the fault-free high-level model, and (2) persist execution progress without requiring checkpointing support by the language runtime. To this end we define two progressively more complex execution models, which contain the compute-storage separation and the record-replay, and prove that they are equivalent to the high-level model.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {133},
numpages = {27},
keywords = {Durable Functions, Programming, Workflows, Reliable, Serverless, Service Composition, Services}
}

@inproceedings {pocket,
author = {Ana Klimovic and Yawen Wang and Patrick Stuedi and Animesh Trivedi and Jonas Pfefferle and Christos Kozyrakis},
title = {Pocket: Elastic Ephemeral Storage for Serverless Analytics},
booktitle = {13th USENIX Symposium on Operating Systems Design and Implementation (OSDI 18)},
year = {2018},
isbn = {978-1-939133-08-3},
address = {Carlsbad, CA},
pages = {427--444},
url = {https://www.usenix.org/conference/osdi18/presentation/klimovic},
publisher = {USENIX Association},
month = oct,
}


@article{exokernel,
author = {Engler, D. R. and Kaashoek, M. F. and O'Toole, J.},
title = {Exokernel: An Operating System Architecture for Application-Level Resource Management},
year = {1995},
issue_date = {Dec. 3, 1995},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {5},
issn = {0163-5980},
url = {https://doi.org/10.1145/224057.224076},
doi = {10.1145/224057.224076},
journal = {SIGOPS Oper. Syst. Rev.},
month = {dec},
pages = {251–266},
numpages = {16}
}

@article{spin,
author = {Bershad, B. N. and Savage, S. and Pardyak, P. and Sirer, E. G. and Fiuczynski, M. E. and Becker, D. and Chambers, C. and Eggers, S.},
title = {Extensibility Safety and Performance in the SPIN Operating System},
year = {1995},
issue_date = {Dec. 3, 1995},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {5},
issn = {0163-5980},
url = {https://doi.org/10.1145/224057.224077},
doi = {10.1145/224057.224077},
journal = {SIGOPS Oper. Syst. Rev.},
month = {dec},
pages = {267–283},
numpages = {17}
}

@inproceedings{comet,
author = {Geambasu, Roxana and Levy, Amit A. and Kohno, Tadayoshi and Krishnamurthy, Arvind and Levy, Henry M.},
title = {Comet: An Active Distributed Key-Value Store},
year = {2010},
publisher = {USENIX Association},
address = {USA},
abstract = {Distributed key-value storage systems are widely used in corporations and across the Internet. Our research seeks to greatly expand the application space for key-value storage systems through application-specific customization. We designed and implemented Comet, an extensible, distributed key-value store. Each Comet node stores a collection of active storage objects (ASOs) that consist of a key, a value, and a set of handlers. Comet handlers run as a result of timers or storage operations, such as get or put, allowing an ASO to take dynamic, application-specific actions to customize its behavior. Handlers are written in a simple sandboxed extension language, providing properties of safety and isolation.We implemented a Comet prototype for the Vuze DHT, deployed Comet nodes on Vuze from PlanetLab, and built and evaluated over a dozen Comet applications. Our experience demonstrates that simple, safe, and restricted extensibility can significantly increase the power and range of applications that can run on distributed active storage systems. This approach facilitates the sharing of a single storage system by applications with diverse needs, allowing them to reap the consolidation benefits inherent in today's massive clouds.},
booktitle = {Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation},
pages = {323–336},
numpages = {14},
location = {Vancouver, BC, Canada},
series = {OSDI'10}
}

@inproceedings {active-networks,
author = {David Tennenhouse},
title = {Active Networks},
booktitle = {{USENIX} 2nd Symposium on {OS} Design and Implementation ({OSDI} 96)},
year = {1996},
address = {Seattle, WA},
url = {https://www.usenix.org/conference/osdi-96/active-networks},
publisher = {USENIX Association},
month = oct,
}

@inproceedings {splinter,
author = {Chinmay Kulkarni and Sara Moore and Mazhar Naqvi and Tian Zhang and Robert Ricci and Ryan Stutsman},
title = {Splinter: {Bare-Metal} Extensions for {Multi-Tenant} {Low-Latency} Storage},
booktitle = {13th USENIX Symposium on Operating Systems Design and Implementation (OSDI 18)},
year = {2018},
isbn = {978-1-939133-08-3},
address = {Carlsbad, CA},
pages = {627--643},
url = {https://www.usenix.org/conference/osdi18/presentation/kulkarni},
publisher = {USENIX Association},
month = oct,
}

@article{sdn,
author = {Feamster, Nick and Rexford, Jennifer and Zegura, Ellen},
title = {The Road to SDN: An Intellectual History of Programmable Networks},
year = {2014},
issue_date = {April 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {2},
issn = {0146-4833},
url = {https://doi.org/10.1145/2602204.2602219},
doi = {10.1145/2602204.2602219},
abstract = {Software Defined Networking (SDN) is an exciting technology that enables innovation in how we design and manage networks. Although this technology seems to have appeared suddenly, SDN is part of a long history of efforts to make computer networks more programmable. In this paper, we trace the intellectual history of programmable networks, including active networks, early efforts to separate the control and data plane, and more recent work on OpenFlow and network operating systems. We highlight key concepts, as well as the technology pushes and application pulls that spurred each innovation. Along the way, we debunk common myths and misconceptions about the technologies and clarify the relationship between SDN and related technologies such as network virtualization.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = {apr},
pages = {87–98},
numpages = {12},
keywords = {programmable networking, software defined networking, network virtualization}
}
